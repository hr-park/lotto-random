{"version":3,"sources":["components/lotto/lotto-box/LottoBoxComponent.js","components/lotto/LottoRandomHeader.js","components/lotto/number-plate/NumberPlateBoxComponent.js","components/lotto/number-plate/NumberPlateComponent.js","components/lotto/LottoRandomSideMenu.js","components/lotto/LottoRandomContents.js","components/LottoRandomTemplate.js","App.js","serviceWorker.js","index.js"],"names":["LottoBoxComponent","numbers","this","props","lottoNumber","slice","b_number","className","map","n","key","Component","LottoRandomHeader","state","drwNo","NumberPlateBoxComponent","handleChange","e","checked","target","number","type","id","selected","onChange","htmlFor","NumberPlateComponent","console","log","setState","i","push","select","index","onClick","handleButtonOnClick","LottoRandomSideMenu","LottoRandomContents","lottoNumbers","LottoRandomTemplate","selectedNumberCount","forEach","s","alert","lotto","selectLotto","length","temp","sort","a","b","Math","floor","random","indexOf","selecte","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.528318a4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport \"./LottoBoxComponent.css\";\r\n\r\nclass LottoBoxComponent extends Component {\r\n    render() {\r\n        const numbers = this.props.lottoNumber.slice(0,6);\r\n        const b_number = this.props.lottoNumber[6];\r\n\r\n        return(\r\n            <div className=\"lotto-box-contents\">\r\n                <div className=\"lotto-box\">\r\n                     {numbers.map((n)=>\r\n                        <div\r\n                            className=\"lotto-box-number\"\r\n                            key={n}\r\n                        >{n}</div>    \r\n                    )}\r\n                    <div className=\"lotto-box-plus\">+</div>\r\n                    <div className=\"lotto-box-number\">{b_number}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LottoBoxComponent;","import React, {Component} from 'react';\r\nimport * as axios from 'axios';\r\nimport \"./LottoRandomHeader.css\";\r\nimport LottoBoxComponent from './lotto-box/LottoBoxComponent';\r\n\r\nclass LottoRandomHeader extends Component {\r\n    state = {\r\n        lottoNumber : [],\r\n        drwNo : 0\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"lotto-random-header\">로랜생!</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LottoRandomHeader;","import React, {Component} from 'react';\r\nimport \"./NumberPlateboxComponent.css\";\r\n\r\nclass NumberPlateBoxComponent extends Component {\r\n    handleChange = (e) => {\r\n        const {checked} = e.target;\r\n        this.props.handleChange(checked, this.props.number);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"number-plate-box-contents\">\r\n                <div className=\"number-plate-box\">\r\n                    <input \r\n                        type=\"checkbox\"\r\n                        id={this.props.number}\r\n                        checked={this.props.selected}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <label htmlFor={this.props.number}>{this.props.number}</label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport  default NumberPlateBoxComponent;","import React, {Component} from 'react';\r\nimport './NumberPlateComponent.css';\r\nimport NumberPlateBoxComponent from './NumberPlateBoxComponent';\r\n\r\nclass NumberPlateComponent extends Component {\r\n   state = {\r\n        selected : []\r\n    }\r\n    componentDidMount() {\r\n        const {selected} = this.state;\r\n        for(let i=1; i<47; i++) {\r\n            selected.push(false);\r\n        }\r\n        this.setState({selected});\r\n    }\r\n\r\n    handleChange = (checked, number) => {\r\n        console.log(number);\r\n        const {selected} = this.state;\r\n        selected[number-1] = checked;\r\n        this.setState({selected});\r\n    };\r\n\r\n   render(){\r\n        return(\r\n            <div>\r\n                 <div className=\"number-plate-contents\">\r\n                    { this.state.selected.map((select, index) =>\r\n                        <NumberPlateBoxComponent\r\n                            key={index}\r\n                            number={index+1}\r\n                            selected={select}\r\n                            handleChange={this.handleChange}\r\n                        />\r\n                    )}\r\n                </div>\r\n                <button className=\"number-button\" onClick={this.props.handleButtonOnClick}>번호 생성</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NumberPlateComponent;","import React, { Component } from 'react';\r\nimport './LottoRandomSideMenu.css';\r\nimport NumberPlateComponent from './number-plate/NumberPlateComponent';\r\n\r\nclass LottoRandomSideMenu extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"lotto-random-sidemenu\">\r\n                <NumberPlateComponent\r\n                    selected={this.props.selected}\r\n                    handleChange={this.props.handleChange}\r\n                    handleButtonOnClick={this.props.handleButtonOnClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LottoRandomSideMenu;","import React, { Component } from 'react';\r\nimport './LottoRandomContents.css';\r\nimport LottoBoxComponent from './lotto-box/LottoBoxComponent';\r\n\r\nclass LottoRandomContents extends Component {\r\n    render() {\r\n        const {lottoNumbers} = this.props;\r\n\r\n        return(\r\n            <div className=\"lotto-random-contents\">\r\n                {lottoNumbers.map((lottoNumber, i) =>\r\n                <LottoBoxComponent\r\n                    key={i}\r\n                    lottoNumber={lottoNumber}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LottoRandomContents;","import React, {Component} from 'react';\r\nimport LottoRandomHeader from './lotto/LottoRandomHeader';\r\nimport LottoRandomSideMenu from './lotto/LottoRandomSideMenu';\r\nimport LottoRandomContents from './lotto/LottoRandomContents';\r\n\r\nimport './LottoRandomTemplate.css';\r\n\r\nclass LottoRandomTemplate extends Component {\r\n\r\n    state = {\r\n        selected : [],\r\n        lottoNumbers : []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {selected} = this.state;\r\n        for(let i=1; i<47; i++) {\r\n            selected.push(false);\r\n        }\r\n        this.setState({selected});\r\n    }\r\n\r\n    handleChange = (checked, number) => {\r\n        //console.log(number);\r\n        const { selected } = this.state;\r\n        selected[number-1] = checked;\r\n        this.setState({selected});\r\n    };\r\n\r\n    handleButtonOnClick = () => {\r\n        const {selected, lottoNumbers} = this.state;\r\n        const numbers = [];\r\n        let selectedNumberCount = 0;\r\n        console.log(selectedNumberCount);\r\n\r\n        selected.forEach((s, i) => {\r\n            if(s) {\r\n                selectedNumberCount++;\r\n                numbers.push(i+1);\r\n            }\r\n        })\r\n\r\n        if (selectedNumberCount < 7){\r\n            alert(\"번호를 7개 이상 선택해주세요.\");\r\n            return;\r\n        } else {\r\n            const lotto = this.selectLotto([], numbers);\r\n            //lottoNumbers.push(lotto);\r\n            this.setState({lottoNumbers : [lotto, ...lottoNumbers]});\r\n        }\r\n    }\r\n\r\n    selectLotto = (lottoNumber, numbers) => {\r\n        if(lottoNumber.length === 7) {\r\n            const temp = lottoNumber.slice(0, 6);\r\n            temp.sort((a,b)=>a-b);\r\n            temp.push(lottoNumber[6]);\r\n            return temp\r\n        }\r\n        let n = numbers[Math.floor(Math.random() * numbers.length)];\r\n        if(lottoNumber.indexOf(n) < 0) {\r\n            lottoNumber.push(n);\r\n        }\r\n        return this.selectLotto(lottoNumber, numbers);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"lotto-random-template\">\r\n                <LottoRandomHeader/>\r\n                <div className=\"lotto-random-main\">\r\n                    <LottoRandomSideMenu\r\n                        selecte={this.state.selected}\r\n                        handleChange={this.handleChange}\r\n                        handleButtonOnClick={this.handleButtonOnClick}\r\n                    />\r\n                    <LottoRandomContents\r\n                        lottoNumbers={this.state.lottoNumbers}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LottoRandomTemplate;","import React, { Component } from 'react';\nimport LottoRandomTemplate from './components/LottoRandomTemplate'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <LottoRandomTemplate/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}